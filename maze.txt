int maze(pair<int, int> input) {
	queue<pair<int, int>> q;
	pair<int, int> cur = input;
	int block = 1;
	q.push(input);
	visited[cur.first][cur.second] = 1;

	while (!q.empty()) {
		int check = 0;
		pair<int, int> cur = q.front();
		q.pop();

		for (int i = 0; i < 4; i++) {
			pair<int, int> next = make_pair(cur.first + x_ar[i], cur.second + y_ar[i]);
			
			if (next.first >= 0 && next.first < row && next.second >= 0 && next.second < col) {
				if (map[next.first][next.second] == '1' && visited[next.first][next.second] != 1) {
					visited[next.first][next.second] = 1;
					block++;
					if (next.first == row - 1 && next.second == col - 1)
						return block;
					q.push(make_pair(next.first, next.second));
					check++;
				}
			}
		}
		if (check == 0)
			block--;
	}
	return block;
}

//// 탐색하다가 더이상 탐색할 수 없는 경우 리턴값 문제 생각
//int maze(int x, int y, int block) {
//	queue<pair<int, int>> q;
//	q.push(pair<int, int>(x,y));
//	visited[x][y] = 1;
//
//	if (x == row - 1 && y == col - 1)
//		return block + 1;
//	if (visited[x][y] == -1) {
//		block++;
//		visited[x][y] = 1;
//		
//		for (int i = 0; i < 4; i++) {
//			int new_x = x + x_ar[i];
//			int new_y = y + y_ar[i];
//
//			if (new_x >= 0 && new_x < row && new_y >= 0 && new_y < col)
//				if (map[new_x][new_y] == '1')
//					block = maze(new_x, new_y, block);
//		}
//	}
//	return block;
//}